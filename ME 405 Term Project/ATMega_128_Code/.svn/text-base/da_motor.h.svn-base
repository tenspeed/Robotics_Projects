//======================================================================================
/** \file  da_motor.h
 *   da_motor.h contains specifications necessary for the methods within da_motor.cpp to be 
 *   called from within any main program as long as this header file is included.
 *
 *  Revisions:
 *    \li  11-04-11	 Included specification for the method "read_a_few" within avr_adc.cpp
 *    \li  04-12-11  Began tearing and hacking at our lab_2 code.
 *	  \li  04-18-11  Final iteration. This code is the bestest.
 *
 *  License:
 *    This file released under the Lesser GNU Public License. The program is intended
 *    for educational use only, but its use is not restricted thereto. 
 */
//======================================================================================

/// This define prevents this .h file from being included more than once in a .cpp file
#ifndef _da_motor_H_
#define _da_motor_H_


//-------------------------------------------------------------------------------------
/**  Following are the headers of the constructor and methods contained in da_motor.cpp.
*	 Also included is aheader for a serial port object which allows da_motor's methods
*    to print to i/o devices.
*/
 

class da_motor
{
	protected:
		/// The motor driver class needs a pointer to the serial port used to output to the terminal.  
		base_text_serial* ptr_to_serial;

	public:
		/** The constructor initializes a motor driver object.
		*/
		da_motor(base_text_serial*);
		
		/** da_motor.set_mode allows a user to choose a motor's rotational direction or apply 
		*   unmodulated braking. These tasks are performed by passing motor 1 or 2 and mode 1,2,or 3.
		*   mode 1 = spin CW    mode 2 = spin CCW   mode 3 = unmodulated braking
		*   @param motor_num: selects motor number 1 or 2.
		*   @param mode: selects mode as detailed above.
		*/
		void set_mode (uint8_t, uint8_t);
		/** manually increase the duty cycle by 2%
		*/
		void increase_duty_cycle (uint8_t, uint8_t*);
		/** manually decrease the duty cycle by 2%
		*/
		void decrease_duty_cycle (uint8_t, uint8_t*);
		/** set the duty cycle with any 8 bit number your heart desires
		*/
		void update_duty_cycle (uint8_t, uint8_t);
		
			
    };
	//-------------------------------------------------------------------------------------
/** This operator prints some BS on a text serial device. We didn't have the heart
*   to erase the cute 'lil fella.
*/

base_text_serial& operator<< (base_text_serial&, da_motor&);

#endif // _da_motor_H_
